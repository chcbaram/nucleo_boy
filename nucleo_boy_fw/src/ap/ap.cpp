/*
 *  ap.c
 *
 *  Created on: 2018. 2. 3.
 *      Author: Baram
 */

#include "ap.h"
#include "orocaboy/Gamebuino-Meta.h"


#define DEMO_NUM  3



void lcdLoop(void);

void setup();
void loop();



void apInit(void)
{
  cmdifBegin(_DEF_UART1, 115200);
  setup();
}

void apMain(void)
{

  while(1)
  {
    cmdifMain();
    //lcdLoop();
    loop();
  }
}


void lcdLoop(void)
{
  uint16_t color = _BLUE;
  static uint16_t x = 0;


  static uint16_t x_cur = 0;
  static uint16_t y_cur = 0;
  uint16_t cur_speed = 2;


  lcdFillScreen(_BLACK);
  lcdFillRect(x, 0, 50, 50, color);


  if (buttonGetPressed(_HW_DEF_BUTTON_UP) == true)
  {
    y_cur  = y_cur - cur_speed;
    y_cur %= (128-20);
  }
  if (buttonGetPressed(_HW_DEF_BUTTON_DOWN) == true)
  {
    y_cur  = y_cur + cur_speed;
    y_cur %= (128-20);
  }
  if (buttonGetPressed(_HW_DEF_BUTTON_LEFT) == true)
  {
    x_cur  = x_cur - cur_speed;
    x_cur %= (160-20);
  }
  if (buttonGetPressed(_HW_DEF_BUTTON_RIGHT) == true)
  {
    x_cur  = x_cur + cur_speed;
    x_cur %= (160-20);
  }

  lcdFillRect(x_cur, y_cur, 20, 20, _GREEN);

  uint32_t pre_time, pro_time;;

  pre_time = micros();
  lcdDrawFrame();
  pro_time = micros()-pre_time;
  cmdifPrintf("time %d %d\n", pro_time, SystemCoreClock);


  x+= 5;
  x %= (160-50);
}



#if DEMO_NUM == 1


int player_score = 0;
int player_h = 8;
int player_w = 2;
int player_x = 4;
int player_y = (gb.display.height() - player_h) / 2;
int player_vymax = 4;
int player_vy = 0;
int player_timeoutmax = 120;
int player_timeout = 0;

//oponent variables
int oponent_score = 0;
int oponent_h = 8;
int oponent_w = 2;
int oponent_x = gb.display.width() - oponent_w - 4;
int oponent_y = (gb.display.height() - oponent_h) / 2;
int oponent_vymax = 4;
int oponent_vy = 0;
int oponent_timeoutmax = 120;
int oponent_timeout = 0;

//ball variables
int ball_size = 3;
int ball_x = oponent_x - ball_size - 5;
int ball_y = (gb.display.height() - ball_size) / 2;
int ball_vx = 2;
int ball_vy = 0;
int ball_vymax = 6;

#define PLAYER 1;
#define OPONENT 2;
int winner_timer;
int winner_timermax = 40;
int winner;

///////////////////////////////////// MOVE PLAYER
void movePlayer() {
  //move the player

  //human control
  if (buttonGetPressed(_HW_DEF_BUTTON_UP)) {
    player_timeout = player_timeoutmax;
    player_vy -= 1;
  } else {
    if (buttonGetPressed(_HW_DEF_BUTTON_DOWN)) {
      player_timeout = player_timeoutmax;
      player_vy += 1;
    } else {
      if (player_timeout > 0) {
        player_vy = player_vy / 2;
      }
    }
  }

  //computer control after timeout
  if (player_timeout > 0) {
    player_timeout--;
  } else {
    if ((player_y + (player_h / 2)) < (ball_y + (ball_size / 2))) { //if the ball is below the oponent
      player_vy = player_vy + 1; //move down
    }
    else {
      player_vy = player_vy - 1; //move up
    }
  }
  player_vy = constrain(player_vy, (-player_vymax), player_vymax);
  player_y = player_y + player_vy;
  player_y = constrain(player_y, (-player_h), gb.display.height());
}

///////////////////////////////////// MOVE OPONENT
void moveOponent() {
  //move the oponent

  //human control
  if (buttonGetPressedEvent(_HW_DEF_BUTTON_B)) {
    oponent_timeout = oponent_timeoutmax;
    oponent_vy -= 1;
    oponent_vy = constrain(oponent_vy, (-oponent_vymax), oponent_vymax);
  } else {
    if (buttonGetPressedEvent(_HW_DEF_BUTTON_A)) {
      oponent_timeout = oponent_timeoutmax;
      oponent_vy += 1;
      oponent_vy = constrain(oponent_vy, (-oponent_vymax), oponent_vymax);
    } else {
      if (oponent_timeout > 0) {
        oponent_vy = oponent_vy / 2;
      }
    }
  }

  //computer control after timeout
  if (oponent_timeout > 0) {
    oponent_timeout--;
  } else {
    if ((oponent_y + (oponent_h / 2)) < (ball_y + (ball_size / 2))) { //if the ball is below the oponent
      oponent_vy = oponent_vy + 1; //move down
    }
    else {
      oponent_vy = oponent_vy - 1; //move up
    }
  }
  oponent_vy = constrain(oponent_vy, (-oponent_vymax), oponent_vymax);
  oponent_y = oponent_y + oponent_vy;
  oponent_y = constrain(oponent_y, (-oponent_h), gb.display.height()); //don't go out of the screen
}

///////////////////////////////////// UPDATE COLLISIONS
void updateCollisions() {
  //check for ball collisions

  //collision with the top border
  if (ball_y < 0) {
    ball_y = 0;
    ball_vy = -ball_vy;
  }

  //collision with the bottom border
  if ((ball_y + ball_size) > gb.display.height()) {
    ball_y = gb.display.height() - ball_size;
    ball_vy = -ball_vy;
  }

  //collision with the player
  if (gb.collideRectRect(ball_x, ball_y, ball_size, ball_size, player_x, player_y, player_w, player_h)) {
    ball_x = player_x + player_w;
    ball_vx = -ball_vx;
    ball_vy += player_vy / 2; //add some effet to the ball
    ball_vy = constrain(ball_vy, (-ball_vymax), ball_vymax);
  }

  //collision with the oponent
  if (gb.collideRectRect(ball_x, ball_y, ball_size, ball_size, oponent_x, oponent_y, oponent_w, oponent_h)) {
    ball_x = oponent_x - ball_size;
    ball_vx = -ball_vx;
    ball_vy += (oponent_vy / 2);
  }

  //collision with the left side
  if (ball_x < 0) {
    oponent_score = oponent_score + 1;
    player_y = (gb.display.height() / 2) - (player_h / 2);
    oponent_y = player_y;
    ball_x = oponent_x - 4;
    ball_vx = -abs(ball_vx);
    ball_vy = 0;
    ball_y = random(0, gb.display.height() - ball_size);
  }

  //collision with the right side
  if ((ball_x + ball_size) > gb.display.width()) {
    player_score = player_score + 1;
    player_y = (gb.display.height() / 2) - (player_h / 2);
    oponent_y = player_y;
    ball_x = player_x + player_w + 5;
    ball_vx = abs(ball_vx);
    ball_vy = 0;
    ball_y = random(0, gb.display.height() - ball_size);
  }
}

void draw() {
  //winner screen
  if (winner_timer > 0) {
    winner_timer--;
    gb.display.setColor(gb.createColor(0, winner_timer*255/winner_timermax, 0));
    if (winner == 1) {
      int t = winner_timermax - winner_timer;
      gb.display.fillRect(player_x - t, player_y - t, player_w + t*2, player_h + t*2);
      gb.lights.fillRect(0,0,1,4);
    }
    if (winner == 2) {
      int t = winner_timermax - winner_timer;
      gb.display.fillRect(oponent_x - t, oponent_y - t, oponent_w + t*2, oponent_h + t*2);
      gb.lights.fillRect(1,0,1,4);
    }
  }

  gb.display.setColor(WHITE);

  //draw the score
  gb.display.setCursor(15, 16);
  gb.display.print(player_score);

  gb.display.setCursor(gb.display.width() - 3 - 15, 16);
  gb.display.print(oponent_score);

  //draw the middle line
  for (int i = 0; i < gb.display.height(); i += 4) {
    gb.display.drawRect(gb.display.width() / 2, i, 1, 2);
  }

  //draw the ball
  gb.display.fillRect(ball_x, ball_y, ball_size, ball_size);

  //draw the player
  if (player_timeout == 0) {
    gb.display.setColor(GRAY);
  } else {
    gb.display.setColor(WHITE);
  }
  gb.display.fillRect(player_x, player_y, player_w, player_h);

  //draw the oponent
  if (oponent_timeout == 0) {
    gb.display.setColor(GRAY);
  } else {
    gb.display.setColor(WHITE);
  }
  gb.display.fillRect(oponent_x, oponent_y, oponent_w, oponent_h);

  //TRY ME! message
  if ((player_timeout == 0) && (oponent_timeout == 0)) {
    gb.display.setCursor(27, 16);
    gb.display.setColor(WHITE, BLACK);
    if ((gb.frameCount % 20) > 10) {
      gb.display.print("TRY ME!");
    }
  }
}

///////////////////////////////////// SETUP
void setup() {
  gb.begin();
  gb.pickRandomSeed(); //pick a different random seed each time for games to be different
}

///////////////////////////////////// LOOP
void loop() {
  if (gb.update()) {
    // clear the previous screen
    gb.display.clear();
    gb.lights.clear();

    //pause the game if C is pressed
    if (buttonGetPressedEvent(_HW_DEF_BUTTON_START)) {
      //gb.titleScreen("Pong Solo");
      //gb.battery.show = false;
      //gb.display.fontSize = 2;
      delay(500);
    }

    movePlayer();
    moveOponent();

    //move the ball
    ball_x = ball_x + ball_vx;
    ball_y = ball_y + ball_vy;

    updateCollisions();

    //reset score when 10 is reached
    if (player_score == 10) {
      winner = PLAYER;
      winner_timer = winner_timermax;
      player_score = 0;
      oponent_score = 0;
    }
    if (oponent_score == 10) {
      winner = OPONENT;
      winner_timer = winner_timermax;
      player_score = 0;
      oponent_score = 0;
    }

    draw();
  }
}
#endif

#if DEMO_NUM == 2
void screenBenchmark();
void colorTest1();
int mode = 0;
#define NUMMODES 3

unsigned long lastMillis = 0;
boolean paused = false;

void colors();
void donothing();

void setup() {
  gb.begin();
}

//dynamicaly change between display modes
//this will jst break after looping for a while,
//probably because of memory fragmentation
void loop() {
  screenBenchmark();
  colors();
  donothing();
}

void drawBottomLine() {
  //Current buffer mode
  gb.display.cursorX = 0;
  gb.display.cursorY = gb.display.height() - 11;
  gb.display.setColor(WHITE);
  gb.display.print(gb.display.width());
  gb.display.print("x");
  gb.display.print(gb.display.height());
  if (gb.display.colorMode == ColorMode::rgb565) {
    gb.display.print(" RGB");
  } else {
    gb.display.print(" INDEX");
  }
  gb.display.setColor(BROWN);
  gb.display.cursorX = 13*4;
  gb.display.setColor(BLUE);
  gb.display.print(" >");
  gb.display.setColor(BROWN);
  gb.display.print("MODE ");

  //bottom line indications
  gb.display.setColor(BROWN);
  gb.display.cursorX = 0;
  gb.display.cursorY = gb.display.height() - 5;
  gb.display.setColor(GREEN);
  gb.display.print("A");
  gb.display.setColor(BROWN);
  gb.display.print("SKIP");
  gb.display.setColor(RED);
  gb.display.print(" B");
  gb.display.setColor(BROWN);
  (paused == true) ? gb.display.print("PLAY ") : gb.display.print("STOP ");
  gb.display.print(gb.getCpuLoad());
  gb.display.print("%");
  gb.display.print(" ");
  gb.display.print(gb.frameCount%100);
}

boolean skip() {
  if (buttonGetPressedEvent(_HW_DEF_BUTTON_RIGHT)) {
    mode++;
    if (mode >= NUMMODES) {
      mode = 0;
    }
    switch (mode) {
      case 0:
        gb.display.init(80, 64, ColorMode::rgb565);
        break;
      case 1:
        gb.display.init(160, 128, ColorMode::index);
        break;
      case 2:
        gb.display.init(80, 64, ColorMode::index);
        break;
    }
  }


  drawBottomLine();

  //pause/unpause when B is pressed
  if (buttonGetPressedEvent(_HW_DEF_BUTTON_B)) {
    paused = !paused;
  }
  //skip frame when A is pressed
  if (buttonGetPressedEvent(_HW_DEF_BUTTON_A)) {
    paused = true;
    return true;
  }
  //skip every 2 seconds if not paused
  if (((millis() - lastMillis) > 4000) && !paused) {
    lastMillis = millis();
    return true;
  }
  return false;
}

void donothing() {
  while (1) {
    if (gb.update()) {
      // clear the previous screen
      gb.display.clear();
      if (skip()) {
        return;
      }
    }
  }
}

void screenBenchmark() {
  //Screen update benchmark
  unsigned long timeBenchmark = 20;
  while (1) {
    if (gb.update()) {
      // clear the previous screen
      gb.display.clear();

      gb.display.setColor(WHITE);
      gb.display.print(1000 / (timeBenchmark));
      gb.display.print(" FPS");
      gb.display.setColor(BROWN);
      gb.display.print(" (");
      gb.display.print(timeBenchmark);
      gb.display.println("ms)");
      gb.display.setColor(WHITE);
      gb.display.print(gb.display.getBufferSize() / 1024);
      gb.display.print(" KB");
      gb.display.setColor(BROWN);
      gb.display.println(" BUFFER");

      drawBottomLine();
      uint16_t startTime = millis();

      gb.tft.drawImage(0, 0, gb.display, gb.tft.width(), gb.tft.height());

      uint16_t endTime = millis();
      timeBenchmark = endTime - startTime;
      if (skip()) {
        return;
      }
    }
  }
}

void colors() {
  //Colors test 1/2
  while (1) {
    if (gb.update()) {
      // clear the previous screen
      gb.display.clear();

      //first column
      gb.display.setColor(WHITE);
      gb.display.println("WHITE");
      gb.display.setColor(GRAY);
      gb.display.println("GRAY");
      gb.display.setColor(DARKGRAY);
      gb.display.println("DARKGRAY");
      gb.display.setColor(BLACK, DARKGRAY);
      gb.display.println("BLACK");
      gb.display.setColor(PURPLE);
      gb.display.println("PURPLE");
      gb.display.setColor(PINK);
      gb.display.println("PINK");
      gb.display.setColor(RED);
      gb.display.println("RED");
      gb.display.setColor(ORANGE);
      gb.display.println("ORANGE");

      //second column
      gb.display.cursorY = 0;
      gb.display.cursorX = 36;
      gb.display.setColor(BROWN);
      gb.display.println("BROWN");
      gb.display.cursorX = 36;
      gb.display.setColor(BEIGE);
      gb.display.println("BEIGE");
      gb.display.cursorX = 36;
      gb.display.setColor(YELLOW);
      gb.display.println("YELLOW");
      gb.display.cursorX = 36;
      gb.display.setColor(LIGHTGREEN);
      gb.display.println("LIGHTGREEN");
      gb.display.cursorX = 36;
      gb.display.setColor(GREEN);
      gb.display.println("GREEN");
      gb.display.cursorX = 36;
      gb.display.setColor(DARKBLUE);
      gb.display.println("DARKBLUE");
      gb.display.cursorX = 36;
      gb.display.setColor(BLUE);
      gb.display.println("BLUE");
      gb.display.cursorX = 36;
      gb.display.setColor(LIGHTBLUE);
      gb.display.println("LIGHTBLUE");
      if (skip()) {
        return;
      }
    }
  }
}

#endif


#if DEMO_NUM == 3
const uint16_t imageTab[] = {80, 64, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0x8668, 0x8668, 0x8668, 0x8668, 0x8668, 0x8668, 0x8668, 0x8668, 0x8668, 0x8668, 0x8668, 0x0, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x0, 0x72c7, 0x0, 0x72c7, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8e4, 0x0, 0xd8e4, 0x0, 0xd8e4, 0x0, 0xd8e4, 0x0, 0xd8e4, 0x0, 0x8668, 0x0, 0x8668, 0x0, 0x8668, 0x0, 0x8668, 0x0, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ddf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x0, 0x72c7, 0x0, 0x72c7, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0x0, 0x0, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a39, 0xffff, 0x8a39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0x0, 0x8668, 0x44a, 0x0, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a39, 0x0, 0x8a39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf720, 0x8668, 0x44a, 0xf720, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a39, 0x8a39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44a, 0x0, 0x8668, 0x44a, 0x44a, 0x8668, 0x0, 0x44a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a39, 0xd8e4, 0xd8e4, 0x8a39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8668, 0x0, 0xf720, 0x44a, 0x8668, 0xf720, 0x0, 0x8668, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a39, 0xd8e4, 0xd8e4, 0x8a39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x72c7, 0x0, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8668, 0x44a, 0x0, 0x44a, 0x8668, 0x0, 0x44a, 0x8668, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a39, 0x8a39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x72c7, 0x0, 0x0, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8668, 0x44a, 0x0, 0xf720, 0xf720, 0x0, 0x44a, 0x8668, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8668, 0x44a, 0x0, 0xd8e4, 0xd8e4, 0x0, 0x44a, 0x8668, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8668, 0x0, 0x0, 0x0, 0x0, 0x8668, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x0, 0x0, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8668, 0x0, 0x0, 0x8668, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0xd8e4, 0x0, 0xd8e4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0xf720, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0xd8e4, 0xca30, 0xd8e4, 0x0, 0xca30, 0x0, 0x0, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ddf, 0x4439, 0x210, 0xfd42, 0x0, 0x0, 0x0, 0x0, 0xca30, 0xd8e4, 0x44a, 0xd8e4, 0xca30, 0xd8e4, 0x0, 0x0, 0x0, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4439, 0x210, 0xf720, 0xfd42, 0x0, 0x0, 0x0, 0x0, 0xd8e4, 0x0, 0x72c7, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xca30, 0x0, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0xf720, 0xfd42, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0xd8e4, 0xd8e4, 0x44a, 0xd8e4, 0x44a, 0xd8e4, 0x0, 0x0, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd42, 0xcc68, 0xcc68, 0xfd42, 0xfd42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44a, 0x44a, 0x0, 0x44a, 0x44a, 0x0, 0x0, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x7ddf, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x7ddf, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x7ddf, 0xca30, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0xf720, 0xf720, 0xf720, 0xf720, 0xfd42, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0xfd42, 0xfd42, 0xcc68, 0xcc68, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0xf720, 0xfd42, 0xf720, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd42, 0xcc68, 0xfd42, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd42, 0xd8e4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd42, 0xcc68, 0xfd42, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd42, 0xf720, 0xfd42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8e4, 0xf720, 0xfd42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd42, 0xd8e4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8e4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x72c7, 0x0, 0x0, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0xca30, 0x0, 0x0, 0x4439, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0xfeb2, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x8a39, 0x4439, 0x4439, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x4439, 0x0, 0x8a39, 0x4439, 0x8a39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x8a39, 0xca30, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x0, 0x0, 0x0, 0x0, 0xca30, 0x0, 0x0, 0x4439, 0xca30, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72c7, 0x0, 0x0, 0x0, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4439, 0x4439, 0x8a39, 0xca30, 0x4439, 0x0, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xfeb2, 0xfeb2, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x4439, 0x8a39, 0xca30, 0xca30, 0x4439, 0x8a39, 0xca30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xf720, 0xfd42, 0xf720, 0x0, 0xf720, 0xfd42, 0x8a39, 0xf720, 0xfd42, 0xf720, 0xfd42, 0x0, 0xf720, 0xfd42, 0x0, 0xf720, 0xfd42, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0xfd42, 0xd8e4, 0xfd42, 0xfd42, 0xfd42, 0xd8e4, 0xfd42, 0xfd42, 0xd8e4, 0xfd42, 0xd8e4, 0xfd42, 0xfd42, 0xd8e4, 0xf720, 0xfd42, 0xd8e4, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xca30, 0xd8e4, 0xd8e4, 0xd8e4, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x0, 0x0, 0xcc68, 0x72c7, 0xfeb2, 0xfeb2, 0xcc68, 0xca30, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xca30, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xfeb2, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0xfeb2, 0x0, 0x0, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0x72c7, 0xcc68, 0x0, 0x0, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xca30, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x0, 0x0, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0xd8e4, 0xd8e4, 0xca30, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xfd42, 0xd8e4, 0xd8e4, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0x72c7, 0x0, 0x0, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xca30, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xd8e4, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0xcc68, 0xfeb2, 0xfeb2, 0xcc68, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0x72c7, 0x72c7, 0xcc68, 0xcc68, 0xcc68, 0xcc68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
Image myImage = Image(imageTab, ColorMode::rgb565);


const uint16_t imageTabIndex[] = {80,64,0x7777,0x7777,0x7777,0xcc77,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x7777,0x7777,0x7777,0xcc77,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xc7cc,0x7777,0x7777,0x7777,0x7777,0xcc7c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x77c7,0x7777,0x7777,0x7777,0x7777,0xcc77,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x7777,0x7777,0x7777,0x7777,0x7777,0xcc77,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x7777,0x7777,0x7777,0x7777,0x7777,0xcc77,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x77c7,0x7777,0x7777,0x7777,0x7777,0xcc7c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x77cc,0x7777,0x7777,0x7777,0x7777,0x7777,0xcccc,0xcccc,0xcccc,0xc0cc,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x7777,0x7777,0x7777,0x7777,0x7777,0x7777,0xcccc,0xcccc,0xc0cc,0x0600,0xcc60,0xcccc,0xcccc,0xc5cc,0x5c55,0xcccc,0xcccc,0xcccc,0xcccc,0xc7cc,0x7777,0x7777,0x7777,0x7777,0x7777,0x7777,0xcccc,0xcccc,0x0ecc,0x06ee,0xcc60,0xcccc,0xcccc,0x59cc,0x95ff,0xcccc,0xcccc,0xcccc,0xcccc,0x77cc,0x7777,0x7777,0x7777,0x7777,0x7777,0x7c77,0xcccc,0xcccc,0x1ec0,0x16ee,0x0c06,0xcccc,0xcccc,0x9fc5,0xf955,0xcc5c,0xcccc,0xcccc,0xcccc,0x77cc,0x7777,0x7777,0x7777,0x7777,0x7c77,0xcc77,0xcccc,0xcccc,0x40c0,0x4e40,0x0c66,0xcccc,0xcccc,0xf5c5,0x5f44,0xcc0c,0xcccc,0xcccc,0xcccc,0xc7cc,0x7777,0x7777,0x7777,0x7777,0x7c77,0xcccc,0xcccc,0xcccc,0xf0c0,0xfef0,0xcc00,0xcccc,0xcccc,0xf5c5,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0x7777,0x7777,0x7777,0x77c7,0xcc77,0xcccc,0xcccc,0xcccc,0x4fc0,0x4eff,0xc70c,0x7777,0x7777,0xf575,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0x77c7,0x7777,0x7777,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x00cc,0x0000,0x7750,0x7777,0x7777,0xf575,0x5f4f,0xc50c,0x5c55,0xcccc,0xcccc,0xcccc,0x77c7,0x7777,0x7777,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xc0cc,0x0555,0x7750,0x7777,0x7777,0xf575,0x5f4f,0x590c,0x95ff,0xcccc,0xcccc,0xcccc,0x7777,0x7777,0x7777,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xc000,0x7707,0x7777,0x7777,0xf575,0x5f4f,0x9f05,0xf955,0xcc5c,0xcccc,0xcccc,0x7777,0x7777,0x7777,0xffff,0xfcff,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0x77cc,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f44,0xcc0c,0xcccc,0xcccc,0x77c7,0x7777,0x7777,0x4444,0x4f44,0xccff,0xcccc,0xcccc,0xcccc,0x77c7,0x7777,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xc7cc,0x7777,0x7777,0xffff,0x44f4,0xff44,0xcccc,0xcccc,0x77cc,0x7777,0x7777,0x7577,0x5755,0xf575,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xffff,0xf4ff,0x4444,0xccfc,0xcccc,0x7777,0x7777,0x7777,0x5977,0x95ff,0xf575,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xffff,0xffff,0x444f,0xcc4f,0xc7cc,0x7777,0x7777,0x7777,0x9f75,0xf955,0xf555,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xffff,0xffff,0xf4f4,0xfc44,0xc7cc,0x7777,0x7777,0x7777,0xf575,0x5f44,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xffff,0xffff,0x4fff,0xfc44,0xc7cc,0x7777,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xffff,0xffff,0xf4f4,0x4f44,0xc7cc,0x7777,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xffff,0xffff,0x4fff,0x4f44,0xcccc,0x7777,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xcccc,0xffff,0xffff,0xf4ff,0x4ff4,0xcccc,0x77c7,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0x55c5,0xffff,0xffff,0x4fff,0x4f44,0xcccc,0xcccc,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xcccc,0xff59,0xffff,0xffff,0xf4ff,0x4ff4,0xcccc,0xc7cc,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0xcccc,0xcccc,0xcccc,0xc5cc,0x559f,0xffff,0xffff,0xffff,0x4f44,0xcccc,0xc7cc,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0x77c7,0x7777,0xcccc,0xc5cc,0x44f5,0xffff,0xffff,0xf4ff,0x4ff4,0xcccc,0xcccc,0x7777,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0x7777,0x7777,0xcc7c,0xc5cc,0x4ff5,0xffff,0xffff,0xffff,0x4f44,0xcccc,0xcccc,0x77c7,0x7777,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xc70c,0x7777,0x7777,0xcc77,0xc5cc,0x4ff5,0xffff,0xffff,0xf4ff,0x4ff4,0xcccc,0xcccc,0xcccc,0x77c7,0xf575,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xc70c,0x7777,0x7777,0xcc77,0xc5cc,0x4ff5,0xffff,0xffff,0xffff,0x4f44,0xcccc,0xcccc,0xcccc,0xcccc,0xf5c5,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0xcc0c,0x0070,0x7700,0xcc7c,0xc5cc,0x4ff5,0xff55,0xffff,0xf4ff,0x4ff4,0xcccc,0xcccc,0xcccc,0xcccc,0xf5c5,0x5f4f,0xf505,0x5f4f,0xf505,0x5f4f,0x770c,0xff0f,0x070e,0x77b7,0xc5bc,0x4ff5,0x5ff9,0xffff,0xffff,0x4f44,0xcccc,0xcccc,0xcccc,0xcccc,0xf5c5,0x5f49,0xf505,0x5f4f,0xf505,0x5f4f,0x700b,0xf0f0,0xe0f0,0x7bbb,0xc5bb,0x4ff5,0x955f,0xffff,0xf4ff,0x4ff4,0xcccc,0xcccc,0xcccc,0x99c9,0xf5c5,0x9f97,0xf505,0x9949,0xf505,0x5f4f,0x400b,0xf0f0,0xe0f0,0x4bbb,0x45bb,0x4ff5,0xf045,0xffff,0xffff,0x4f44,0xcccc,0xcccc,0xcccc,0x77c9,0xf999,0x797f,0x9905,0x7997,0xf505,0x5f4f,0x4004,0xffff,0xe00e,0x44b4,0x45b4,0x4ff5,0xf0f5,0xffff,0xf4ff,0x4ff4,0xcccc,0xcccc,0xcccc,0x7fc9,0x9977,0xf77f,0x7799,0x797f,0xf505,0x5f4f,0x4404,0x1001,0x03ee,0x4434,0x4534,0x4ff5,0xf0f5,0xffff,0xffff,0x4f44,0xcccc,0xcccc,0xcccc,0x97cc,0x77ff,0xffff,0xff77,0x9ff7,0xf505,0x5f4f,0x4303,0x1101,0xe00e,0x4333,0x4533,0x4ff5,0xf0f5,0xffff,0xf4ff,0x4ff4,0xcccc,0xcccc,0xcccc,0x97cc,0xffff,0xffff,0xffff,0x9ff7,0xf505,0x5f4f,0x3303,0x4430,0x0340,0x3333,0x3533,0x4ff5,0xf0f5,0xffff,0xffff,0x0044,0xcc00,0xcccc,0xcccc,0xc9cc,0xff7f,0xffff,0xff05,0x9ff7,0xf005,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xf0f5,0xfbff,0xf4ff,0x1ef0,0x0cee,0xcbcc,0xcbcc,0x9fcc,0xf07f,0xf0ff,0xff70,0x5f79,0x0305,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0xf0f5,0xbbbf,0xbfbf,0xee01,0xe0ee,0xbbcc,0xbbbc,0x77b9,0x07ff,0x0c00,0xff05,0x9f79,0x3300,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xf0f5,0xbbb4,0xb0b4,0xe01e,0xeee0,0xbb04,0xbbb4,0xf497,0xf0ff,0x22c2,0xff20,0x79f7,0x3b00,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xf0f5,0x4b44,0x4044,0xe0ee,0xeee0,0x4b04,0x4b44,0x7f49,0x0dff,0x22d2,0x0fdd,0xf7ff,0x3b90,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0xf0f5,0x4344,0x4044,0x1eee,0xe1ee,0x4304,0x4344,0x9744,0x0dff,0xdd0d,0x0f0d,0x79ff,0x3300,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0xf0f5,0x3334,0x3334,0xee01,0x10ee,0x3334,0x3334,0x7f39,0x0dff,0xd0c0,0x0fcd,0x9ff7,0x3300,0xb33b,0x3333,0x3333,0x33b3,0x3333,0x33b3,0x3333,0xf0f5,0x3333,0x3033,0x8088,0x8810,0x3303,0x3333,0xff97,0xf0ff,0xdddd,0xffd0,0x79ff,0x3300,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3b03,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0xbbbb,0x33b3,0xb3b3,0x33b3,0x3333,0x3333,0x3333,0x3333,0x3333,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0xb33b,0x3333,0x3333,0x3333,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0x33b3,0x3333,0x33b3,0x3333,0x33b3,0x3333,0x33b3,0x3333,0x33b3,0x3333,0x33b3,0x3333,0x33b3,0x3333,0x33b3,0x3333,0x3333,0x3333,0x3333,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0xbb33,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0xb33b,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x33b3,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x33b3,0xb33b,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0xb33b,0x3b33,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333,0x3333};
Image myImageIndex = Image(imageTabIndex, ColorMode::index);


const uint16_t animationTab[] = {16,16,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87d8,0xdd8d,0xdddd,0xdddd,0x87d8,0xdd7d,0xdddd,0xdddd,0x87df,0xfd78,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdd0d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd0d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x00dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87d8,0xdd8d,0xdddd,0xdddd,0x87d8,0xdd7d,0xdddd,0xdddd,0x87df,0xfd78,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdd0d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd0d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x00dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87d8,0xdd8d,0xdddd,0xdddd,0x87d8,0xdd7d,0xdddd,0xdddd,0x87df,0xfd78,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdd0d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd0d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x00dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87d8,0xdd8d,0xdddd,0xdddd,0x87d8,0xdd7d,0xdddd,0xdddd,0x87df,0xfd78,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdd0d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd0d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x87dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x00dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xd777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87d8,0xdd8d,0xdddd,0xdddd,0x87d8,0xdd7d,0xdddd,0xdddd,0x87df,0xfd78,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55d0,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xd7dd,0xdd77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xf0dd,0xddf0,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x78d8,0xdd7d,0xdddd,0xdddd,0x87d8,0xdd78,0xdddd,0xdddd,0xf7d8,0xfd78,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xdd0d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x78d8,0xdd78,0xdddd,0xdddd,0x77d8,0xdd78,0xdddd,0xdddd,0x77df,0xdd7f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x77d7,0xdddd,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xf0d0,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x78dd,0xdd78,0xdddd,0xdddd,0x77d8,0xdd88,0xdddd,0xdddd,0x77f8,0xddf8,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd88,0xdddd,0xdddd,0x77dd,0xdd88,0xdddd,0xdddd,0x77f8,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdd0d,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x88df,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x05dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x50dd,0xdd0d,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd88,0xdddd,0xdddd,0x77dd,0xdd88,0xdddd,0xdddd,0x77f8,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdd0d,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x88df,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x05dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x50dd,0xdd0d,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd88,0xdddd,0xdddd,0x77dd,0xdd88,0xdddd,0xdddd,0x77f8,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdd0d,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x88df,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x05dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x50dd,0xdd0d,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd88,0xdddd,0xdddd,0x77dd,0xdd88,0xdddd,0xdddd,0x77f8,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x00dd,0xdd0d,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x88df,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x05dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd8d,0xdddd,0xdddd,0x77dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x50dd,0xdd0d,0xdddd,0xdddd,0xd0dd,0xdd0d,0xdddd,0xdddd,0x00dd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x7d77,0xdddd,0xdddd,0xdddd,0x7777,0x7dd7,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x0fdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x87dd,0xdd88,0xdddd,0xdddd,0x77dd,0xdd88,0xdddd,0xdddd,0x77f8,0xdd8f,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd50,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x77d7,0xdddd,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffd0,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x78dd,0xdd8d,0xdddd,0xdddd,0x78dd,0xdd8d,0xdddd,0xdddd,0x7fdd,0xdd8d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x88d8,0xdd88,0xdddd,0xdddd,0x88d8,0xdd88,0xdddd,0xdddd,0x88d8,0xdd88,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xdddd,0xd7dd,0xdd77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x7777,0x7d77,0xdddd,0xdddd,0x77dd,0xdd7d,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddf0,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0xffdd,0xddfd,0xdddd,0xdddd,0x88dd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd7d,0xdddd,0xdddd,0x8fdd,0xdd7d,0xdddd,0xdddd,0x88dd,0xdd8d,0xdddd,0xdddd,0x55dd,0xdd5d,0xdddd,0xdddd,0x0dd0,0xdd00,0xdddd};
Image animation = Image(animationTab, ColorMode::index, 40);


unsigned long lastMillis = 0;
boolean paused = false;


void drawBottomLine() {
  //Current buffer mode
  gb.display.cursorX = 0;
  gb.display.cursorY = gb.display.height() - 11;
  gb.display.setColor(WHITE);
  gb.display.print(gb.display.width());
  gb.display.print("x");
  gb.display.print(gb.display.height());
  if (gb.display.colorMode == ColorMode::rgb565) {
    gb.display.print(" RGB");
  } else {
    gb.display.print(" INDEX");
  }
  gb.display.setColor(BROWN);
  gb.display.cursorX = 13 * 4;
  gb.display.print(" STATIC");

  //bottom line indications
  gb.display.setColor(BROWN);
  gb.display.cursorX = 0;
  gb.display.cursorY = gb.display.height() - 5;
  gb.display.setColor(GREEN);
  gb.display.print("A");
  gb.display.setColor(BROWN);
  gb.display.print("SKIP");
  gb.display.setColor(RED);
  gb.display.print(" B");
  gb.display.setColor(BROWN);
  (paused == true) ? gb.display.print("PLAY ") : gb.display.print("STOP ");
  gb.display.print(gb.getCpuLoad());
  gb.display.print("%");
  gb.display.print(" ");
  gb.display.print(gb.frameCount % 100);
}

boolean skip() {
  drawBottomLine();

  //pause/unpause when B is pressed
  if (buttonGetPressedEvent(_HW_DEF_BUTTON_B)) {
    paused = !paused;
  }
  //skip frame when A is pressed
  if (buttonGetPressedEvent(_HW_DEF_BUTTON_A)) {
    paused = true;
    return true;
  }
  //skip every 2 seconds if not paused
  if (((millis() - lastMillis) > 4000) && !paused) {
    lastMillis = millis();
    return true;
  }
  return false;
}

void drawMyImage() {
  while (1) {
    if (gb.update()) {
      gb.display.clear();
      gb.display.drawImage(0,0,myImage);
      if (skip()) {
        return;
      }
    }
  }
}

void drawMyImageIndex() {
  while (1) {
    if (gb.update()) {
      gb.display.clear();
      gb.display.drawImage(0,0,myImageIndex);
      if (skip()) {
        return;
      }
    }
  }
}

void drawAnimation() {

  uint8_t x = 0;
  uint8_t y = 20;

  animation.setTransparentColor(ColorIndex::blue);

  gb.display.drawImage(0,0,myImage);
  gb.display.drawImage(x,y,animation, 32, 32);
  gb.updateDisplay();

  while (1) {
    if (gb.update()) {


      if (buttonGetPressed(_HW_DEF_BUTTON_RIGHT))
      {
        gb.display.clear();
        gb.display.drawImage(0,0,myImage);
        gb.display.drawImage(x,y,animation, 32, 32);
        x++;
        animation.setFrame(x%2);
      }
      if (buttonGetPressed(_HW_DEF_BUTTON_LEFT))
      {
        gb.display.clear();
        gb.display.drawImage(0,0,myImage);
        gb.display.drawImage(x,y,animation, 32, 32);
        x--;
        animation.setFrame(20+x%2);
      }
      if (skip()) {
        return;
      }
    }
  }
}

void drawAnimation2() {

  uint8_t x = 0;
  uint8_t y = 20;
  uint8_t size = 1;

  animation.setTransparentColor(ColorIndex::blue);

  gb.display.fill(ColorIndex::gray);
  animation.setFrame(0);

  gb.display.drawImage(x,y,animation, 8+size, 8+size);

  gb.updateDisplay();

  while (1) {
    if (gb.update()) {


      if (buttonGetPressed(_HW_DEF_BUTTON_RIGHT))
      {
        gb.display.clear();
        gb.display.fill(ColorIndex::gray);
        gb.display.drawImage(x,y,animation, 8+size, 8+size);
        x++;
        animation.setFrame(x%2);
      }
      if (buttonGetPressed(_HW_DEF_BUTTON_LEFT))
      {
        gb.display.clear();
        gb.display.fill(ColorIndex::gray);
        gb.display.drawImage(x,y,animation, 8+size, 8+size);
        x--;
        animation.setFrame(20+x%2);
      }
      if (buttonGetPressed(_HW_DEF_BUTTON_START))
      {
        size++;
        size %= 32;

        gb.display.clear();
        gb.display.fill(ColorIndex::gray);
        gb.display.drawImage(x,y,animation, 8+size, 8+size);
      }
      if (buttonGetPressed(_HW_DEF_BUTTON_SELECT))
      {
        size--;
        size %= 32;

        gb.display.clear();
        gb.display.fill(ColorIndex::gray);
        gb.display.drawImage(x,y,animation, 8+size, 8+size);
      }


      if (skip()) {
        return;
      }
    }
  }
}

void donothing() {
  while (1) {
    if (gb.update()) {
      // clear the previous screen
      gb.display.clear();
      if (skip()) {
        return;
      }
    }
  }
}

void screenBenchmark() {
  //Screen update benchmark
  unsigned long timeBenchmark = 20;
  while (1) {
    if (gb.update()) {
      // clear the previous screen
      gb.display.clear();

      gb.display.setColor(WHITE);
      gb.display.print(1000 / (timeBenchmark));
      gb.display.print(" FPS");
      gb.display.setColor(BROWN);
      gb.display.print(" (");
      gb.display.print(timeBenchmark);
      gb.display.println("ms)");
      gb.display.setColor(WHITE);
      gb.display.print(gb.display.getBufferSize() / 1024);
      gb.display.print(" KB");
      gb.display.setColor(BROWN);
      gb.display.println(" BUFFER");

      drawBottomLine();
      uint16_t startTime = millis();

      gb.tft.drawImage(0, 0, gb.display, gb.tft.width(), gb.tft.height());

      uint16_t endTime = millis();
      timeBenchmark = endTime - startTime;
      if (skip()) {
        return;
      }
    }
  }
}

void colors() {
  //Colors test 1/2
  while (1) {
    if (gb.update()) {
      // clear the previous screen
      gb.display.clear();

      //first column
      gb.display.setColor(WHITE);
      gb.display.println("WHITE");
      gb.display.setColor(GRAY);
      gb.display.println("GRAY");
      gb.display.setColor(DARKGRAY);
      gb.display.println("DARKGRAY");
      gb.display.setColor(BLACK, DARKGRAY);
      gb.display.println("BLACK");
      gb.display.setColor(PURPLE);
      gb.display.println("PURPLE");
      gb.display.setColor(PINK);
      gb.display.println("PINK");
      gb.display.setColor(RED);
      gb.display.println("RED");
      gb.display.setColor(ORANGE);
      gb.display.println("ORANGE");

      //second column
      gb.display.cursorY = 0;
      gb.display.cursorX = 36;
      gb.display.setColor(BROWN);
      gb.display.println("BROWN");
      gb.display.cursorX = 36;
      gb.display.setColor(BEIGE);
      gb.display.println("BEIGE");
      gb.display.cursorX = 36;
      gb.display.setColor(YELLOW);
      gb.display.println("YELLOW");
      gb.display.cursorX = 36;
      gb.display.setColor(LIGHTGREEN);
      gb.display.println("LIGHTGREEN");
      gb.display.cursorX = 36;
      gb.display.setColor(GREEN);
      gb.display.println("GREEN");
      gb.display.cursorX = 36;
      gb.display.setColor(DARKBLUE);
      gb.display.println("DARKBLUE");
      gb.display.cursorX = 36;
      gb.display.setColor(BLUE);
      gb.display.println("BLUE");
      gb.display.cursorX = 36;
      gb.display.setColor(LIGHTBLUE);
      gb.display.println("LIGHTBLUE");
      if (skip()) {
        return;
      }
    }
  }
}

void setup() {
  gb.begin();
}

void loop() {
  screenBenchmark();
  colors();
  drawMyImage();
  drawMyImageIndex();
  drawAnimation();
  drawAnimation2();
  donothing();
}
#endif
